
참고글 >> "api 호출 로그 수집 스프링부트" 검색
**********0. 스프링부트 애플리케이션과  grafana 기반 metric & log 모니터링 >> https://jaehee329.tistory.com/45

	0.5 자세한 예시 
		>> https://velog.io/@roycewon/Spring-boot-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81Prometheus-Grafana-docker
		>> https://velog.io/@windsekirun/Spring-Boot-Actuator-Micrometer%EB%A1%9C-Prometheus-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0
	1. 스프링부트 애플리케이션의 Access Log를 통해 일정 시간마다 URL별 호출량 통계 내기 >> https://kim-oriental.tistory.com/59
	


작업 내용 
	1. mysql 설치
	    : 참고
		: https://giveme-happyending.tistory.com/203
	    : 설정내용
		: username >> root
`		: pw >> 1234
		: windowservice name >> MySQL

	2. 스프링부트(인텔리제이)와 깃허브 연동
		: https://velog.io/@ssoop/%EA%B9%83%ED%97%88%EB%B8%8CGitHub-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0-Spring-Boot-IntelliJ



--------------------------------------------------------------------


metric  >> ( 메모리 사용률, CPU 사용률, 스레드 사용률 등.. ) 시간이 지남에 따라 변화하는 데이터. 


스프링부트에서의 metric 수집 >> Actuator의 MicroMeter 모듈이 담당
	:  Actuator 엑츄에이터 >> 스프링 부트 애플리케이션의 상태 모니터링, 관리 기능을 제공하는 모듈
		: metric 수집 및 애플리케이션의 상태를 모니터링할 수 있는 다양한 엔드포인트를 제공
		: 사용 방법
			(1) depedency 추가 >> spring initailzr 에서 "spring boot actuator" 추가해 프로젝트 생성
			(2) application.properties 에서  Spring Boot Actuator의 엔드포인트 활성화 >>
				: management.endpoints.web.exposure.include 는 Spring Boot Actuator의 엔드포인트에만 적용되는 설정이지, 스프링부트 전반적인 엔드포인트에 대한 것은 아니다.
				: 이거 설정 안해주면 "/actuator" path 로 요청해도 그런 경로 없다고 404 애러 뜬다.

				sol 1. 걍 모든 엔드포인트 활성화 >>management.endpoints.web.exposure.include=*
 
				sol 2. 필요한 엔드포인트만 활성화 >>management.endpoints.web.exposure.include=health,info,metrics .. 


			(3) (스프링부트 애플리케이션 실행 후) Actuator 제공 엔드포인트롤 path 로 하여 원하는 정보 get


		: 주요 엔드포인트
			(0)  /actuator >> actuator 가 제공하는 엔드포인트 목록을 확인 가능
			{
  			  "_links": {
 			       "self": {
   			         "href": "http://127.0.0.1:8080/actuator",
     			       "templated": false
     			   },
   			     "beans": {
       			     "href": "http://127.0.0.1:8080/actuator/beans",
     			       "templated": false
  			      },
   			     "caches-cache": {
  			          "href": "http://127.0.0.1:8080/actuator/caches/{cache}",
   			         "templated": true
 			       },
  			      "caches": {
   			         "href": "http://127.0.0.1:8080/actuator/caches",
    			        "templated": false
     			   },
   			     "health": {
   			         "href": "http://127.0.0.1:8080/actuator/health",
  			          "templated": false
  			      },
   			     "health-path": {
    			        "href": "http://127.0.0.1:8080/actuator/health/{*path}",
   			         "templated": true
    			    },
   			     "info": {
   			         "href": "http://127.0.0.1:8080/actuator/info",
    			        "templated": false
   			     },
  			      "conditions": {
   			         "href": "http://127.0.0.1:8080/actuator/conditions",
     			       "templated": false
  			      },
    			    "configprops": {
     			       "href": "http://127.0.0.1:8080/actuator/configprops",
     			       "templated": false
    			    },
    			    "configprops-prefix": {
         			   "href": "http://127.0.0.1:8080/actuator/configprops/{prefix}",
         			   "templated": true
     			   },
  			      "env": {
     			       "href": "http://127.0.0.1:8080/actuator/env",
    			        "templated": false
  			      },
 			       "env-toMatch": {
 			           "href": "http://127.0.0.1:8080/actuator/env/{toMatch}",
  			          "templated": true
 			       },
  			      "loggers": {
   			         "href": "http://127.0.0.1:8080/actuator/loggers",
    			        "templated": false
    			    },
     			   "loggers-name": {
     			       "href": "http://127.0.0.1:8080/actuator/loggers/{name}",
           			 "templated": true
      			  },
   			     "heapdump": {
     			       "href": "http://127.0.0.1:8080/actuator/heapdump",
    			        "templated": false
    			    },
   			     "threaddump": {
     			       "href": "http://127.0.0.1:8080/actuator/threaddump",
    			        "templated": false
  			      },
  			      "prometheus": {
    			        "href": "http://127.0.0.1:8080/actuator/prometheus",
  			          "templated": false
 			       },
    			    "metrics": {
   			         "href": "http://127.0.0.1:8080/actuator/metrics",
       			     "templated": false
     			   },
      			  "metrics-requiredMetricName": {
      			      "href": "http://127.0.0.1:8080/actuator/metrics/{requiredMetricName}",
          			  "templated": true
 			       },
   			     "sbom-id": {
  			          "href": "http://127.0.0.1:8080/actuator/sbom/{id}",
      			      "templated": true
			        },
 			       "sbom": {
     			       "href": "http://127.0.0.1:8080/actuator/sbom",
  			          "templated": false
 			       },
 			       "scheduledtasks": {
    			        "href": "http://127.0.0.1:8080/actuator/scheduledtasks",
			            "templated": false
 			       },
 			       "mappings": {
 			           "href": "http://127.0.0.1:8080/actuator/mappings",
 			           "templated": false
 			       }
 			   }
			}

			(1) Health Check 헬스 체크 >> /actuator/health 
				:  애플리케이션의 현재 상태(정상적으로 동작 중인지 )를 확인. 

		******(2) Metric 매트릭 >> /actuator/metrics
				: MicroMeter 를 사용해 애플리케이션의 성능 및 리소스 사용에 관한 metric 을 수집
				    : MicroMeter  >>스프링 부트 애플리케이션의 metric을 수집하는,  Actuator에 내장된 모듈
					: https://semtul79.tistory.com/17


				: 수집한 metric은 프로메테우스, 그라파나 같은 모니터링 시스템과 연동해 시각화 가능


			(3) Environment 환경 설정 >> /actuator/env
				: 현재 애플리케이션의 환경 설정( 프로파일, 환경 변수, 시스템 프로퍼티 등)을 확인

			(4) Info 일반 정보 >> /actuator/info
				:  애플리케이션에 대한 일반적인 정보( 애플리케이션의 버전, 빌드 정보, 커스텀 정보 등) 확인

			(5) HTTP Tracing HTTP 요청 추적>> /actuator/httptrace
				:  최근 HTTP 요청 및 응답을 추적
				

			(6) Thread Dump  스레드 덤프 >> /actuator/threaddump
				:  JVM의 스레드 상태를 덤프하여, 스레드가 어떻게 동작하고 있는지 확인							: 성능 문제나 데드락 등을 진단하는 데 유용

			(7) Loggers 로그 레벨 조정 >> /actuator/loggers
				: 플리케이션의 로거 설정(로그 레벨 등.. )을 조회 및 (동적으로) "수정"

			(8) Caches 캐시 상태 >> /actuator/caches
				: 애플리케이션의 캐시 상태를 확인




		: HTTP방식과 JMX방식으로 데이터를 제공





	: https://lordofkangs.tistory.com/326



모니터링 시스템 구축하기
	: https://velog.io/@roycewon/Spring-boot-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81Prometheus-Grafana-docker
	: 모니터링 시스템 구축 이유
		1. 운영상 발생한 버그나 오류에 대해 빠른 확인
		2. 사용자의 액세스와 활동 분석 

	: Spring actuator


		: Grafana - Prometheus는 서버 메트릭 수집 및 시각화를 위해 함께 쓰인다.
		: Prometheus>>  오픈소스 모니터링 및 경보 도구로, 메트릭 수집, 저장, 쿼리, 시각화 및 경보 기능을 제공. 이를 스프링 부트 애플리케이션과 연계하면 API 호출 메트릭을 수집하고, Prometheus와 Grafana를 통해 모니터링할 수 있다.


